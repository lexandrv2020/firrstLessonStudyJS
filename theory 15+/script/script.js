'use strict';
/*
const header = document.querySelector('h1'),
    link = document.getElementById('googl'),
    img = document.querySelector('img');

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Style
//console.log('link: ', header.style);
//console.log('link: ', link.style);
//console.log('link: ', img.style);


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Attribute
//console.log('link: ', header.attributes);
//console.log('link: ', link.attributes);
//console.log('link: ', img.attributes);

//.hasAttribute //проверяет наличие аттрибута Да/Нет
//.getAttribute //возвращает значение аттрибута 
//.setAttribute //устанавливает значение аттрибута
//.removeAttribute //устанавливает значение аттрибута

//console.log(img.hasAttribute('alt')); //true / false
//console.log(img.getAttribute('alt')); // logo
//img.setAttribute('alt', 'logotype'); // новый аттрибут вместо logo - logotype
//img.removeAttribute('alt'); // удаляет у элемента аттрибут



//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Class

//console.log(img.className);
//img.className = 'new_class new'; //заменяет класс
//console.log(img.className);
//console.log(img.classList);
//img.classLisе.add('new')
//img.classLisе.remove('new')
//img.classList.contains('new')
//img.classLisе.remove('toggle') - убирает если есть или добавляет если нет.


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Data
//Dataset

//был               <h1>HTML Аттрибуты </h1>               
header.dataset.aboutHeader = 'Заголовок' //добавит авто аттрибут 'data-about-header'
    // стал             <h1 data-about-header="Заголовок">HTML Аттрибуты </h1>
console.log(img.dataset); // = img: "miniglo.png" (из html)
//ищет data, потом -img которое переводит в свойство img и получает значение

img.addEventListener('mouseenter', (e)=>{
    event.target.src = event.target.dataset.img;
    //меняет картинку при наведении мыши
})
*/





///////////////////////////////////////////////////////////////////
/////************РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ *************************////
///////////////////////////////////////////////////////////////////

//это объект к-й описывает набор символов который потом используется для поиска подстрок в тексте


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// СОЗДАНИЕ РВ (между двумя слэшами /..../)

const reg1 = /привет/; // способ 1
const reg2 = new RegExp('привет'); // способ 2

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// есть метод test
//console.log(reg1.test('всем привет добро пожаловать')); //true (есть слово "привет")
//console.log(reg1.test('всем хай добро пожаловать')); //false (нет слова "привет")
//или
//console.log(/привет/.test('всем привет добро пожаловать')); //true (есть слово "привет") учитывает РЕГИСТР
//c//onsole.log(/хай/.test('всем привет добро пожаловать')); //true (есть слово "привет")

//порядок строк (^ - строка начинается,  $ - заканчивается)
//console.log(/^привет/.test('всем привет добро пожаловать')); //false (есть слово "привет" но оно не первое (знак степени ^)) 
//console.log(/^привет/.test('привет всем добро пожаловать')); //true (есть слово "привет" и оно первое)
//console.log(/привет$/.test('добро пожаловать, всем привет')); //true (есть слово "привет" и оно последнее ($))
//console.log(/^привет$/.test('привет')); //Проверка на полное совпадение строки
//console.log(/^привет$/.test('привет привет')); //false



//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// Метод у строки match()  - принимает РВ в виде параметра
const string = 'Привет друг, добро пожаловать, прошу проходите';
const result1 = string.match(/п/); //индекс первого вхождения подстроки (19)
//console.log('result1: ', result1); //index: 19
//["п", index: 19, input: "Привет друг, добро пожаловать, прошу проходите", groups: undefined]

const result2 = string.match(/п/i); //i - флаг для игнорирования регистра
//console.log('result2: ', result2); //index: 0
//["п", index: 0, input: "Привет друг, добро пожаловать, прошу проходите", groups: undefined]

const result3 = string.match(/п/ig); //g - ищет все подстроки и возвращает МАССИВ. Флаги можно комбинировать (ig)
//console.log('result2: ', result3); // ["П", "п", "п", "п"]

/////в РФ есть спецсимволы
const string2 = 'спецсимволы: + * . ^ $ }{ ][ () > / ';
//для их использования их надо экранировать (обратный слэш: \)
const result4 = string2.match(/\./); //перед + поставил \
//console.log('result4: ', result4); //index: 13
//["+", index: 13, input: "спецсимволы: + * . ^ $ }{ ][ () > / ", groups: undefined]

// точка (.) ищет любой символ кроме переноса строки
const result5 = string2.match(/./); //. без экрана ищет первый символ.. чтобы все нужен флаг g или gi
//console.log('result5: ', result5);
//["с", index: 0, input: "спецсимволы: + * . ^ $ }{ ][ () > / ", groups: undefined]

/****************************************/
//[] -для объединения символов или диапазона
const result6 = string.match(/[абв]/g); //найдет все "а" "б" "в" в строке
//console.log('result6: ', result6);
//(5) ["в", "б", "а", "в", "а"]
const result7 = string.match(/[ауоиыэюяуё]/g); //найдет все гласный 

///работа с диапазонами
const string10 = `Привет друг, добро пожаловать, прошу проходите
             мой номер телефона 8-999*123-45-67
             мой номер домофона 7*139`;
const string11 = 'Hello friend, welcome, please come through';

let result11 = string10.match(/[А-ЯЁа-яё]/gi); //найдет все рус буквы в строке
//console.log('result11: ', result11);

result11 = string11.match(/[А-ЯЁа-яё]/g); //не найдет рус буквы - null
//console.log('result11: ', result11);
result11 = string11.match(/[a-z]/g); //не найдет рус буквы - null
//console.log('result11: ', result11);

let result12 = string10.match(/[0-9]/g); //найдем ТОЛЬКО цифры
//console.log('result12: ', result12); //(11) ["8", "9", "9", "9", "1", "2", "3", "4", "5", "6", "7"]

let result13 = string10.match(/[^0-9]/g); //найдем ВСЕ КРОМЕ цифры (домик вначале)
//console.log('result13: ', result13); //(70) [....]


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// ПРЕДОПРЕДЕЛЕННЫЕ ВЫРАЖЕНИЯ
//.match(/\d/g)  \d - только цифры
//.match(/\D/g)  \D - только буквы
//.match(/\s/g)  \s - все переносы и пробелы
//.match(/\S/g)  \S - все буквы и цифры без пробелов и переносов
//.match(/\w/g)  \w - ТОЛЬКО англ. буквы и цифры и нижнее подчеркивание (только АНГЛИЙСКИЕ буквы)
//.match(/\W/g)  \W - КРОМЕ англ.букв и цифр и нижнего подчеркивания


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// Поиск нескольких вариантов / группировка

let string20 = `Привет друг, добро пожаловать, прошу проходите
             мой номер телефона 8-999*123-45-67
             мой номер домофона 7*139
             девушка
             дедушка
             номера`;

//хотим найти номер телефона и номер домофона

let result20 = string20.match(/телефона домофона/gi); //null
result20 = string20.match(/телефона|домофона|добро/gi); //(3) ["добро", "телефона", "домофона"]
result20 = string20.match(/(теле|домо)фона/gi); //(2) ["телефона", "домофона"] //группировка+комбинация
result20 = string20.match(/де(в|д)ушка/gi); //(2) ["девушка", "дедушка"] 
result20 = string20.match(/де[вд]ушка/gi); //(2) ["девушка", "дедушка"] - ПРОЩЕ [..]
//console.log('result20: ', result20);


//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// Операторы квантификации (возможность указывать повторения)

//////? (или или)
let result30 = string20.match(/номера?/gi); // ( ? - применяется к букве 'а' (перед ?) = или есть или нет)
//console.log('result30: ', result30); //["номер", "номер", "номера"]
result30 = string20.match(/номе(ра)?/gi); // ( ? - применяется к фразе в скобках 'ра' (перед ?) = или есть или нет)
//console.log('result30: ', result30); //["номе", "номе", "номера"]

let string21 = `Привет друг, добро пожаловать, прошу проходите
             мой номер телефона 8-999*123-45-67
             мой номер домофона 7*139
             девушка
             дедушка
             номераа
             номераааа`;
//////+ (буква должна быть обязательна)
let result31 = string21.match(/номера+/gi); // ( + - применяется к букве 'а' (перед +) )
//console.log('result31: ', result31); //["номераа", "номераааа"]

//////* (буква может ибыть или нет)
result31 = string21.match(/номера*/gi); // ( * может быть а может не быть )
//console.log('result31: ', result31); //["номер", "номер", "номераа", "номераааа"]

///{} - сколько раз символ повтаряется
result31 = string21.match(/номера{2}/gi); // 2 повторяется символ
//console.log('result31: ', result31);  //["номераа", "номераа"]

result31 = string21.match(/номера{1,4}/gi); // повторяется символ 1-4 раза
//console.log('result31: ', result31);  //["номераа", "номераааа"]



//.  (пробелы)
result31 = string21.match(/о.о/gi); // подстрока начинается и заканчивается на 'о' (точка сколько символов между)
//console.log('result31: ', result31);  //["охо", "омо"]

result31 = string21.match(/о.{3}о/gi); // подстрока начинается и заканчивается на 'о' { (сколько символов между) } }
//console.log('result31: ', result31);  //["ожало", "ой но", "ой но", "омофо"]

result31 = string21.match(/о.{1,3}о/gi); // подстрока начинается и заканчивается на 'о' { (диапазон между сколько символов между (1-3)) } }
//console.log('result31: ', result31);  //["обро", "ожало", "охо", "ой но", "ой но", "омофо"] //самое длинное совпадение ищет
result31 = string21.match(/о.{1,}о/gi); // подстрока начинается и заканчивается на 'о' { (диапазон между сколько угодно символов) } }
//console.log('result31: ', result31);  // (3) ["обро пожаловать, прошу прохо", "ой номер телефо", "ой номер домофо"] по каждой строке

let string32 = `Привет друг, добро пожаловать, прошу проходите
             мой номер телефона 8-999*123-45-67
             мой номер домофона 7*139
             девушка
             дедушка
             номераа
             номераааа
             <div class = "best">Привет МИР </div>`;
//получить теги
let result32 = string32.match(/<.*>/gi);
//console.log('result32: ', result32); // :( нашел максимальный вариант ["<div class = "best">Привет МИР </div>"]

result32 = string32.match(/<.*?>/gi);
//console.log('result32: ', result32); // каждый вариант отдельно  ["<div class = "best">", "</div>"]

////////////!!!!!!!!!!!!!!!!            Вперед смотрящие утверждения / отрицания
//пример найти строку после которой написано чтото конкретное
let result33 = string32.match(/номер(?= домофона)/gi);
//console.log('result33: ', result33); // ["номер"]

////////////!!!!!!!!!!!!!!!!            Replace()

let result35 = string32.replace(/номер(?= домофона)/, 'пин-код'); //все номера с после ЕСТЬ "домофона"
//console.log('result35: ', result35); // мой пин-код домофона 7*139
result35 = string32.replace(/номер(?! домофона)/, 'пин-код'); //все номера с после НЕТ "домофона"
//console.log('result35: ', result35); // мой пин-код домофона 7*139

///////////!!!!!!!!!!!!!!!!            Search()

let result36 = string32.search(/номер/);
//console.log('result36: ', result36); //64 << индекс где находится первая буква слова в поисковом параметре



/////////////////////////////////////////               Регулярное выражение для email

let string40 = `Привет друг, добро пожаловать, прошу проходите
             мой номер телефона 8-999-123-45-67
             мой номер домофона 7*139
             boss@gmail.com
             +79154794486
             +7(915)4794486
             master@yandex.ru
             номераааа
             <div class = "best">Привет МИР </div>`;

const email = string40.match(/\w+@\w+\.\w{2,3}/g);
//console.log('email: ', email);

const mobile = string40.match(/\+?[78]([-()]*\d){10}/g); //match()
const mobile2 = string40.replace(/\+?[78]([-()]*\d){10}/g, '***'); //replace()
const email2 = string40.search(/\w+@\w+\.\w{2,3}/g); //match() 

//console.log('mobile: ', mobile); //  поиск строки / массива найденых строк
//console.log('mobile2: ', mobile2); //  заменяет 
//console.log('email2: ', email2); //  возвращает индекс


///////////////////////////////////////// !!!!!!!!!!!!!!!Метод split() 

const string50 = 'Hello friend, welcome, please заходите 55525_';
const res50 = string40.split(' '); //все переносы / пробелы / символы... >100 элементов
const res51 = string40.split(/[\s,]+/); //ужасно

//console.log('res50: ', res50); // 120 элементов включая пробелы и переносы
//console.log('res51: ', res51); // 29 реальных значений


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
///                                                     !!!!!!!!!!!!!!!!!
////ПРАКТИКА

const input = document.querySelector('input'),
    output = document.querySelector('.output'),
    output2 = document.querySelector('.output2');

/*input.addEventListener('input', () => {
    //берем текст в инпуте и выводим в див
    let text = input.value;
    output.textContent = text;
    //output2.textContent = text.replace(/a/g, ''); //не выводить букву a
    //output2.textContent = text.replace(/\d/g, ''); //выводить только цифры
    //output2.textContent = text.replace(/\D/g, ''); //выводить без цифр

    //output2.textContent = text.replace(/\D/g, (match) => match.toUpperCase()); //все большими буквами через функцию
    //output2.textContent = text.replace(/саша/g, (match) => match.toUpperCase()); //саша через функцию

    //ВХОДНАЯ ГРУППА в callback функции (возвращаем )
    output2.textContent = text.replace(/(\w+)@(\w+\.\w{2,3})/gi, (match, val1, val2) => val1); //val - области в скобках 1-я, 2-я n-я


});
*/

///                             !!!!!!!!!!!!!!!!!!!!!!!!Валидация
input.addEventListener('input', () => {
    input.value = input.value.replace(/\d/g, '*'); //запретили вводить цифры
});


///