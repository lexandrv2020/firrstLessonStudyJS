'use strict';
/*
Особенности современного стандарта ES6 (Ecma Script - стандарт) 'Harmony'
17/06/2015 
Интерполяция. Деструктуризация 
Новый синтаксис
*/

//********ПЕРЕМЕННЫЕ**********************
//проблемы ES5

//... переопределение переменных

//console.log(n); //? undefined
/*
var n = 5;
//console.log(n);
var n = 10;
var n = 0;
*/


//
/*
for (var i = 0; i < 5; i++) {
    setTimeout(function() {
        console.log(i); // >>>> 55555
    }, 1000);
}

for (let i = 0; i < 5; i++) {
    setTimeout(function() {
        console.log(i); // >>>> 55555
    }, 1000 * i);
}

let -  область видимости = блок кода ограниченный фигурными скобками {}  !!!!!!!!!!!!!!!
const -  область видимости = весь код  !!!!!!!!!!!!!!!

const , let - объявляются один раз

массивы заданные через const могут расширяться элементами (добавлением).
объекты заданные через const позвоялют изменять только свойства (добавить, менять свойства присутствующие)
*/

//********СТРОКИ**********************
//-------------
//+++++++++++++
/*
const name = 'Alex',
    age = 30;

const newStr = `<h1>Hello<h1>    
                    <div>${name}</div>
                    <div>${age+1}</div>` //(переносы автоматические)?
//console.log('newStr: ', newStr);
*/

/*
//********ПАРАМЕТРЫ ПО УМОЛЧАНИЮ (в параметрах функции)**********************
const createHome = function(wall = 1, doors = 1, windows = 2) {
    console.log(`Дом имеет:
        стен: ${wall},
        дверей: ${doors},
        окон: ${windows}`);
};
createHome(5, 4);
*/

///СТЕРЕЛОЧНЫЕ ФУНКЦИИ***************************************
/*
const sum2 = (a, b) => {
    return a + b;
}
console.log('sum2(5, 6); ', sum2(5, 6));

//если функция сразу возвращает значение >>>
const sum1 = (a, b) => a + b;
console.log('sum1(6, 8); ', sum1(5, 6));

//если функция возвращает объект >>> надо включать в скобки ({ })
const sum3 = (a, b) => ({
    a: a,
    b: b,
    sum: a + b,
});
console.log('sum3(6, 8); ', sum3(5, 6));

//////////////////////
[].forEach((e) => {
    console.log(e);
});

// === 

[].forEach(function(e) {
    console.log(e);
});

//стрелочная функция не имеет своего this*/